extends base/base

block title
    title composite

block slides
    section
        h3 composite
        br
        h3 组合（复合）
        br
        h3 has-a

    section
        section
            h3  组合类
            pre.
                class Line{
                public:
                    Line(Point p1,Ponit p2):p1(p1),p2(p2){};
                    Line(int x1,int y1,int x2,int y2):p1(x1,y1),p2(x2,y2){};
                private:
                    Point p1,p2;
                };
                class Point{
                public:
                    Point(){};
                    Ponit(int x,int y):x(x),y(y){};
                private:
                    int x = 0,y = 0;
                };
        section
            h3 Stack + Node
            pre.
                class Stack{
                public:
                    void push(int item);
                    int pop();
                    bool isEmpty();
                private:
                    Node head;
                };
        section
            h3 Stack+Node
            pre.
                void Stack::push(int item){
                    Node * node = new Node(item);
                    node->next = head.next;
                    head.next = node;
                }
                int pop(){
                    Node *first = head.next;
                    int value =first->value;
                    head.next = first->next;
                    delete first;
                    return value;
                }
                bool isEmpty(){
                    return head.next == null;
                }
        section
            h3 Stack+Node
            pre.
                class Node{
                public:
                    Node(int value = 0):value(value){};
                    int value;
                    Node * next = null;
                };
        section
            h3 Stack+Node
            pre.
                struct Node{
                    Node(int value=0):value(value){};
                    int value;
                    Node * next = null;
                };
        section
            h3 Stack+Stack
            pre.
                class Stack{
                public:
                    void push(int item);
                    int pop();
                    bool isEmpty();
                private:
                    int data[100];
                    int count = 0;
                    Stack *next;
                };
        section
            h3 Stack+Stack
            pre.
                void Stack::push(int item){
                    if (count<100){
                        data[count]=item;
                    }else{
                        if(count == 100){
                            next = new Stack();
                        }
                        next->push(item);
                    }
                    count++;
                }
        section
            h3 Stack+Stack
            pre.
                int pop(){
                    int value;
                    count--;
                    if (count<100){
                        value = data[count];
                    }else{
                        item = next->pop();
                        if(count == 100){
                            delete next;
                        }
                    }
                    return value;
                }
                bool isEmpty(){
                    return 0 == count;
                }

        section
            h3 Stack+Vector(stl)
            pre.
                class Stack{
                public:
                    void push(int item);
                    int pop();
                    bool isEmpty();
                private:
                    Vector<int> data;
                };
        section
            h3 Stack+Vector
            pre.
                void Stack::push(int item){
                    data.push_back(item);
                }

                int Stack::pop(){
                    int value = data.back();
                    data.pop_back();
                    return value;
                }
                bool Stack::isEmpty(){
                    return data.empty();
                }

    section
        h3 private 继承实现 组合
        pre.
            class Stack:private Vector&ltint&gt{
            public:
                void push(int item);
                int pop();
                bool isEmpty();
            };

    section
        h3 Stack
        pre.
            void Stack::push(int item){
                push_back(item);
            }

            int Stack::pop(){
                int value = back();
                pop_back();
                return value;
            }
            bool Stack::isEmpty(){
                return empty();
            }



