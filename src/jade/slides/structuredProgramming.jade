extends base/base

block title
    title Chap2-6 Structured Programming

block slides
    section
        h1 Structured Programming
        br
        h2 (结构化编程)
    section
        h3 Data Structure
        br
        h3 (数据结构)
    section
        section
            h3 Literal constant（文字常量）
            br
            pre.
                i = 255;

                area = r * r * 3.14;

                for(i = 0; i < 80; i++){
                    ...
                }
            p.fragment magic number (幻数)
        section
            h3 Symbol constant（符号常量）
            pre.
                #define PI 3.14
                #define MaxChar 80
            br
            .fragment
                h3 Named Constant（命名常量/常变量）
                pre.
                    const float PI = 3.14；
                    const short int MaxChar = 80;

    section
        section
            h3 基本数据类型
            pre.
                int sum, area, i=0 ;
                char c1='a', c2='b', c3=61 ;

                float x, y, x ;
                double pi(3.14);
        section
            h3 新引入的bool型(布尔型/逻辑型)
            pre.
                bool isDead = true;
                isDead = false;

                isDead = 0 ;
                isDead = 1 ;
                isDead = 100 ;

                if ( isDead ) {...}
                if ( !isDead && isRich ) {...}
        section
            h3 enum（枚举类型）
            p 定义：
            pre.
                enum  weekday{
                    SUN, MON, TUE, WED, THU, FRI, SAT
                }；

                enum city{
                    Beijing,Shanghai,Tianjin=5,Chongqing
                }；
            p 使用枚举类型定义变量：
            pre.
                enum  city  city1, city2;
                city  city1, city2; //省略enum

                //同时定义类型及变量
                enum city{
                    Beijing,Shanghai,Tianjin=5,Chongqing
                } city1, city2；
        section
            p 枚举类型变量的赋值：
            pre.
                weekday d1,d2,d3,d4;
                d1=SUN;
                d2=6;            //错误
                d3=Shanghai;     //错误
            p 在条件表达式中：
            pre.
                if( city1 == 3 );
                if( d1 > SUN );

    section
        h3 array（数组）
        p 定义：
        pre.
            int a[5];
            int m[2][3];
        p 用字符进行初始化：
        pre.
            char s1[ ]={'C','h','i','n','a'};
            char s2[ ][4] = {
                {'H','o','w'},
                {'a','r','e'},
                {'y','o','u'}
            };
        p 用字符串进行初始化：
        pre.
            char s3[ ] = "China";
            char s4[ ][4] = {"how", "are", "you"};
    section
        h3 struct（结构）
        p 定义：
        pre.
            struct student
            {
                long no,birthday;   //学号，生日
                char name[22];      //姓名
                char sex;         //性别 1或0 分别代表男或女
                float score;        //成绩
            }；

    section
        h3 联合
        pre.
            union UnionData
            {
                char       Ch;
                short      Sint;
                long       Lint;
                unsigned   Uint;
                float       f;
                double     d;
                char       str[10]
            }；

    section
        section
            h3 指针
            p 指针（变量）定义与初始化：
            pre.
                int x=100;

                1)  int  *ip ;
                    ip = &x ;

                2)  int *ip = &x ;
        section
            p 指针运算：
            pre.
                *ip = 200 ;

                ip++;

                ip = ip - 10 ;

                ip += 10 ;

                offset = ip1 - ip2 ;

                if ( ip1 > ip2 ) {......};
        section
            p void型指针：
            pre.
                void *vp ;

                int n = 100 ;

                vp = &n ;

                cout << * ( int * ) vp ;


                int *ip ;

                ip = ( int * ) vp ;
        section
            p 指针与字符串：
            pre.
                char str[5] = “abcd” ;

                char *p_str = “abcd” ;
        section
            p 指针与数组：
            pre.
                cout << *str ; //将输出什么？

                cout << *( str+2 ) ; // ?

                cout << p_str[3] ; // ?

                p_str = str ;
        section
            p 二（多）重指针：
            pre.
                int **p ;

                (int *) *p ;
        section
            h3 动态内存分配
            p C：
            pre.
                char * p = (char *) malloc ( 100 ) ;

                strcpy ( p , ”Hello World!” ) ;
                    ...
                free ( p ) ;
            p C++：
            pre.
                int *p ;

                p = new int ;

                *p = 50 ;   // p = new int( 50 ) ;

                delete p ;
        section
            p C++：
            pre.
                int *p = new int[100] ;

                if( p == NULL ) {

                    cout<<“内存分配失败!” ;

                } else {

                    for ( int i=0 ; i < 100; i++ ){

                        p[ i ] = i ;

                    }
                    ... ...
                    delete []p ;
                }
        section
            p 多维数组动态分配：
            pre.
                int ( *p ) [5][6] ;

                p = new int [3][5][6];

                int x = 4 ;

                p1 = new int [x][5][6];

                p2 = new int[3][x][6] ;  //错误

        section
            p 函数指针
            pre.
                int add ( int a , int b ) ; //普通函数

                int ( *fptr ) ( int a , int b ) ; //定义函数指针

                fptr = add ;     // 给函数指针赋值，或fptr = &add

                add ( 1 , 2 ) ;

                ( *fptr ) ( 1 , 2 ) ; //用指向函数的指针调用函数add

                fptr ( 1 , 2 ) ;      //用指向函数的指针调用函数add
        section
            h3 指针常量与常量指针
            p 指针常量： (指针本身是常量):
            pre.
                int a = 100 ;

                int * const p = &a;
            p 常量指针： （指向常量的指针）
            pre.
                const int a = 100 ;

                const int * p = &a;// 或者 int const * p = &a;

            p 指向常量的常量指针： （都是常量）
            pre.
                const int a = 100 ;

                const int * const  p = &a;
                // 或者
                int const * const p = &a;
    section
        h3 类型转换
        p 自动转换
        pre.
            int n = 10 ;
            char c = 20 ;

            n = c ;

            c = n ;
        .fragment
            p 强制转换
            pre.
                int  n ；
                float x = 8.57 ;

                n = ( int ) x ;

                x = ( float ) n ;

    section
        h3 Control Structure
        br
        h3 (控制结构)
    section
        section
            h3 单分支
            pre.
                if ( score > 100 ) score = 100 ;
                if ( score > 100 ) { score = 100 ;  }
                if ( score > 100 )
                    score = 100 ;
                if ( score > 100 ) {
                    score = 100;
                }
        section
            h3 if else
            pre.
                if ( x > y ) cout << x ;
                else cout << y;
            br
            p.fragment 可以更简单吗？
            .fragment
                pre.
                    cout << (x > y)? x:y ;
        section
            h3 if else if
            pre.
                if( n >= 60 )
                    if ( n>= 90 ) cout << "A";
                    else if ( n >= 80 ) cout << "B";
                        else cout << "C";
                else cout << "D";
        section
            h3 if else if
            pre.
                if( n >= 60 ){
                    if ( n>= 90 ){
                        cout << "A";
                    }
                    else{
                        if ( n >= 80 ){
                            cout << "B";
                        }
                        else{
                            cout << "C";
                        }
                    }
                }
                else{
                    cout << "D";
                }
    section
        section
            h3 多分支
            pre.
                switch ( n/10 ){
                    case 10:
                    case 9:
                        cout << “A” ;
                        break;
                    case 8:
                        cout << “B” ;
                        break;
                    case 7:
                    case 6:
                        cout << “C” ;
                        break;
                    default:
                        cout << “D” ;
                }
    section
        section
            h3 入口条件循环（while）
            pre.
                int  i = 1;
                int  sum = 0 ;

                while ( i <= 100 ) {
                    sum += i++ ;
                }
        section
            h3 出口条件循环（do while）
            pre.
                int  i = 1;
                int  sum = 0 ;

                do {
                    sum += i++ ;
                }while ( i <= 100 )
        section
            h3 for循环
            pre.
                int  sum = 0 ;

                for ( int i=1; i <= 100;i++ ) {
                    sum += i ;
                }
        section
            h3 嵌套for循环
            pre.
                 for ( int i=1; i <= 9; i++ ) {

                    for(int j=1;  j<=i ;  j++){
                        cout &lt&ltj&lt&lt“x”&lt&lti&lt&lt“=“ &lt&ltj * i&lt&lt “\t”;
                    }

                    cout &lt&lt endl;
                 }
        section
            h3 break语句
            pre.
                int i , n ;
                cin >> n ;

                for ( i=2; i < n;i++ ) {
                    if ( n%i == 0 ) break;
                }

                if ( i >= n ) cout << n << “是素数” ;
                else cout << n << “不是素数” ；
            br
            p.fragment 此处，不用break，可以吗？
            .fragment
                pre.
                    for ( i=2; i < n, n%i !=0;i++ ) ;
        section
            h3 while + break
            pre.
                int i , n ;
                while（1）{
                    cin >> n ;
                    if ( n <= 1 ) break ;

                    for ( i=2; i < n, n%i !=0;i++ ) ;

                    cout << n << i >= n ? “是”:“不是” << "素数";
                }

        section
            h3 while + break + continue
            pre.
                int i , n ;
                while（1）{
                    cin >> n ;

                    if ( n <= 0 ) break ;
                    if ( 1 == n ) continue ;

                    for ( i=2; i < n, n%i !=0;i++ ) ;

                    cout << n << i >= n ? “是”:“不是” << "素数";
                }

    section
        section
            h3 function
            br
            h3 (函数)
        section
            h3 一个简单例子
            pre.
                #include &ltiostream>
                using namespace std;

                int max( int x , int y )
                {
                    return ( x>y ) ? x : y;
                }

                void main()
                {
                    int a , b ;

                    cin >> a >> b ;
                    cout << max( a , b ) << endl ;

                    cin >> a >> b ;
                    cout << max( a , b ) << endl ;
                }
        section
            h3 函数prototype（原型）
            pre.
                #include &ltiostream>
                using namespace std;

                int max( int x , int y )；

                void main()
                {
                    int a , b ;
                    cin >> a >> b ;
                    cout << max( a , b ) << endl ;
                }

                int max( int x , int y )
                {
                    return ( x>y ) ? x : y;
                }
        section
            h3 递归
            pre.
                //求 n!

                int fac( int n )
                {
                    return  1==n ? 1 :  n * fac( n-1 ) ;
                }

                void main()
                {
                    cout << fac( 3 );
                }
        section#practice2_1
            h3 【课堂练习2-1】p79 汉诺塔
            img(src="img/Hanoi.jpeg", width="400", height="400")

        section
            h3 函数调用及传参的原理
        section
            h3  观察下面的代码：
            pre.
                void swap ( int x , int y );

                void main ( ) {
                    int x = 10 , y = 20 ;
                    swap( x , y ) ;
                }

                void swap ( int x , int y ) {
                    int  temp = x ;
                    x = y ;
                    y = temp ;
                }
        section
            h3  传指针参数：
            pre.
                void swap ( int* x , int* y );

                void main ( ) {
                    int x = 10 , y = 20 ;
                    swap( &x , &y ) ;
                }

                void swap ( int* x , int* y ) {
                    int  temp = *x ;
                    *x = *y ;
                    *y = temp ;
                }
        section
            h3 传Reference(引用)参数：
            pre.
                void swap ( int & x , int  & y );

                void main ( ) {
                    int x = 10 , y = 20 ;
                    swap( x , y ) ;
                }

                void swap ( int & x , int  & y ) {
                    int  temp = x ;
                    x = y;
                    y = temp;
                }
        section
            h3 独立引用
            br
            pre.
                int  x = 100 ;
                int & r = x ;

                r = 200 ;
                x = 300 ;
        section
            h3 函数返回类型为引用(1)
            br
            pre.
                int maxValue ( int a [ ] ,  int  n ) {
                    int  t = 0 ;
                    for ( int i = 0 ;  i < n ;  i++ ){
                        if ( a[ i ] > a[ t ] ) t = i ;
                    }
                    return a[ t ] ;
                }

                int& maxItem ( int a [ ] ,  int  n ) {
                    int  t = 0 ;
                    for ( int i = 0 ;  i < n ;  i++ ){
                        if ( a[ i ] > a[ t ] ) t = i ;
                    }
                    return a[ t ] ;
                }
        section
            h3 函数返回类型为引用(2)
            br
            pre.
                int  a[ 5 ] = { 1, 2, 3, 4, 5 } ;

                int m1 = maxValue ( a , 5 ) ;

                int &m2 = maxItem( a , 5 ) ;
                m3 = 100 ;

                maxItem( a , 5 ) = 200 ;

                int m3 = maxItem( a , 5 ) ;
                m2 = 300 ;

        section
            h3 利用宏定义避免函数的调用开销
            pre.
                #define max( x , y ) ( (x)>(y) ? (x) : (y) );

                void main()
                {
                    int a , b ;
                    cin >> a >> b ;
                    cout << max( a , b ) << endl ;
                }
        section
            h3 default(默认)实参
            pre.
                void drawCircle( int x, int y, int r,
                    int color )
                {
                    ...
                }

                void main()
                {
                    drawCircle( 0 , 0 , 1 , BLACK ) ;
                    drawCircle( 2 , 1 , 2 , BLACK ) ;
                    drawCircle( 3 , 0 , 3 , RED ) ;
                    drawCircle( 4 , 3 , 4 , BLACK ) ;
                }

        section
            h3 default(默认)实参
            pre.
                void drawCircle( int x, int y, int r,
                    int color = BLACK )
                {
                    ...
                }

                void main()
                {
                    drawCircle( 0 , 0 , 1 ) ;
                    drawCircle( 2 , 1 , 2 ) ;
                    drawCircle( 3 , 0 , 3 , RED ) ;
                    drawCircle( 4 , 3 , 4 ) ;
                }
            br
            p.fragment 默认值必须在最后，why？
        section
            h3 C语言中功能相同（参数不同）的函数
            pre.
                //原型：
                int max2int ( int x , int y ) ;
                int max3int ( int x , int y , int z ) ;

                float max2float ( float x , float y ) ;

                //调用：
                n = max2int ( 1 , 2 ) ;
                n = max3int ( 1 , 2 , 3 ) ;

                f = max2float ( 1.0 , 2.0 ) ;
        section
            h3 C++ : overload(函数重载)
            pre.
                原型：
                int max ( int x , int y ) ;
                int max ( int x , int y , int z ) ;

                float max ( float x , float y ) ;

                调用：
                n = max ( 1 , 2 ) ;
                n = max ( 1 , 2 , 3 ) ;

                f = max ( 1.0 , 2.0 ) ;

    include homework/2_2

    section
        h3 作用域 & 生命期
        br
        ul
            li 作用域：
                ul
                    li 全局：
                        ul
                            li 文件作用域
                    li 局部：
                        ul
                            li 函数作用域
                            li 块作用域
                            li 函数原型作用域
            li 生命期：
                ul
                    li 静态
                    li 动态
    section
        section#example2_1
            h3 【例2-1】电脑入库及销售
            br
            pre.
                1）查看库存
                2）电脑入库
                3）卖出
                4）退出程序
        section
            h3 【代码】菜单显示
            pre.
                cout&lt&lt"1)查看库存"&lt&ltendl;
                cout&lt&lt"2)电脑入库"&lt&ltendl;
                cout&lt&lt"3)售出"&lt&ltendl;
                cout&lt&lt"4)退出程序"&lt&ltendl;
        section
            h3 【代码】菜单选择
            pre.
                cin&gt&gtaction;
                switch(action){
                case 1:
                    list();
                    break;
                case 2:
                    enterWarehouse();
                    break;
                case 3:
                    outWarehouse();
                    break;
                case 4:
                    return 0;
                default:
                    cout&lt&lt"您输入了错误的菜单项，请重新选择！";
                }
        section
            h3 【代码】主循环
            pre.
                do{
                    ...
                    case 3:
                        outWarehouse();
                        break;
                    case 4:
                        return 0;
                    ...
                }while(1);
        section
            h3 【代码】list 显示库存信息
            pre.
                void list(){

                    cout&lt&lt"型号\t"&lt&lt"数量"&lt&ltendl;

                    for(int i=0;i&ltmodelCount;i++){

                        cout&lt&ltcomputers[i].model&lt&lt"\t"

                        cout&lt&ltcomputers[i].total&lt&ltendl;
                    }
                }
        section
            h3 【代码】Computer数据结构定义
            pre.
                int modelCount = 0;

                struct Computer{

                    char model[20];

                    int total;

                }computers[100];
        section
            h3 【代码】enterWarehouse 入库
            pre.
                void enterWarehouse(){
                    struct Computer computer;
                    cout&lt&lt"型号：";
                    cin&gt&gtcomputer.model;
                    cout&lt&lt"数量：";
                    cin&gt&gtcomputer.total;

                    int i = find(computer.model);
                    if(i == modelCount){
                        strcpy(computers[i].model,computer.model);
                        computers[i].total = computer.total;
                        modelCount++;
                    }else{
                        computers[i].total += computer.total;
                    }
                }
        section
            h3 【代码】find 按型号查找
            pre.
                int find(char* model){
                   int i;
                   for(i=0;i&ltmodelCount;i++){
                      if(strcmp(computers[i].model,model)==0){
                         break;
                      }
                   }
                   return i;
                }
        section
            h3 【代码】outWarehouse 出库
            pre.
                void outWarehouse(){
                    struct Computer computer;
                    cout&lt&lt"型号：";
                    cin&gt&gtcomputer.model;
                    cout&lt&lt"数量：";
                    cin&gt&gtcomputer.total;

                    int i = find(computer.model);
                    if(i == modelCount){
                        cout&lt&lt"型号错误！"&lt&ltendl;
                    }else{
                        computers[i].total -= computer.total;
                    }
                }
        section
            h3 【代码】outWarehouse 优化
            pre.
                void outWarehouse(){
                    struct Computer computer;

                    input(computer);

                    int i = find(computer.model);

                    if(i == modelCount){
                        cout&lt&lt"型号错误！"&lt&ltendl;
                    }else{
                        computers[i].total -= computer.total;
                    }
                }
        section
            h3 【代码】input 输入一个computer的信息
            pre.
                void input(struct Computer computer){

                    cout&lt&lt"型号：";
                    cin&gt&gtcomputer.model;

                    cout&lt&lt"数量：";
                    cin&gt&gtcomputer.total;
                }
            p.fragment ???
        section
            h3 【代码】input fix(修复)bug 的版本
            pre.
                void input(struct Computer &computer){

                    cout&lt&lt"型号：";
                    cin&gt&gtcomputer.model;

                    cout&lt&lt"数量：";
                    cin&gt&gtcomputer.total;
                }
    include homework/2_3

    section
        h1 The End



