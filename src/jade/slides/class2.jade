extends base/base

block title
    title class2

block slides

    section
        h3 再论class

    section
        section
            h3 public or private?
            pre.
                class Rect{
                    ...
                private:
                    int w,h;
                };
                int area(Rect & rect){
                    return rect.w * rect.h;
                }
        section
            h3 friend(友元)
            pre.
                class Rect{
                    ...
                private:
                    int w,h;
                    friend int area(Rect & rect);
                };
                int area(Rect & rect){
                    return rect.w * rect.h;
                }
        section
            h3 另一个friend的例子
            br
            h3 list & Iterator(迭代器)

    section
        section
            h3 protected
            br
            h3 家族可见性

        section
            h3 protected inherited
            br
            h3 保护继承

    section
        section
            h3 利用全局变量计数
            pre.
                int point_count = 0；
                class Point{
                public:
                    Point(){
                        point_count++;
                    }
                    ~Point(){
                        point_count--;
                    }
                };
        section
            h3 static(静态)成员
            pre.
                class Point{
                public:
                    Point(){
                        count++;
                    }
                    ~Point(){
                        count--;
                    }
                private:
                    static int count;
                };
                int Point::count = 0;
        section
            h3 singleton(单例模式)
            pre.
                class MyClass{
                public:
                    static MyClass *getInstance(){
                        if(instance==NULL)
                            instance=new MyClass();
                        return instance;
                    }
                private:
                    static MyClass *instance;
                    MyClass(){}
                };
                MyClass *MyClass::instance=NULL;
                void main()
                {
                    MyClass *obj;
                    obj=MyClass::getInstance();
                }

    include topics/multiple_inheritance

    section
        h1 The End

