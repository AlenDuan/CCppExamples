//
   User: luckystar
   Date: 13-9-11
   Time: 下午3:03

extends base

block title
    title Class & Object

block slides
    section
        h1 Class & Object
        br
        h2 (类 与 对象)

    section
        section
            h3 Encapsulation
            br
            h3 (封装)
        section
            h3 【例1】Queue(队列)
            br
            ul
                li.fragment append(入队)
                li.fragment pop(出队)
                br
                li.fragment 队列是否满
                li.fragment 队列是否空
        section
            h3 使用 Queue类和对象
            pre.
                Queue queue;
                if ( !queue.isFull() ) {
                    queue.append ( 100 ) ;
                }

                int n ;
                if ( !queue.isEmpty() ) {
                    n = queue.pop ( ) ;
                }
                ...
                Queue *p = new Queue() ;
                p -> append ( 100 ) ;
                p = &queue ;
                ...

        section
            h3 define/declare(定义/声明）: Queue类 （ Queue.h ）
            pre.
                class Queue{

                public:
                    void append ( int item ) ;
                    int pop ( ) ;
                    bool isEmpty ( ) ;
                    bool isFull ( ) ;
            pre.fragment.
                private:
                    int data[ 100] ;
                    int head = 10 ;
                    int tail = 10 ;
                };
        section
            h3 implement(实现) Queue类 ( Queue.cpp )
            pre.
                #include “Queue.h”

                void Queue::append( int item ){
                    data[ head ] = item;
                    head = (head+1) % 100;
                }
                int Queue::pop(){
                    tail = ( tail + 1 ) % 100 ;
                    return data[ tail-1 ] ;
                }
                bool Queue::isEmpty(){
                    return (head == tail);
                };
                bool Queue::isFull(){
                    return ((head+1)%100 == tail);
                };
        section
            h3 【课堂练习7-1】IntStack类
            br
            ul
                li LIFO(后进先出,FILO)
                br
                li 可容纳100个元素
                br
                li 可判断是否为空
                br
                li 可判断是否已满
                br
                li push(进栈)操作
                br
                li pop(出栈)操作
    section
        section
            h3 constructor/deconstuctor
            br
            h3 (构造/析构)
        section
            h3 改进IntStack类
            br
            h3 初始化的时候确定最大容量
            pre.
                IntStack stack(10000);
                ...
            .fragment
                pre.
                    IntStack.h:

                    class IntStack{
                    public:
                        IntStack(int capbility);// 构造函数
            pre.fragment.
                private:
                    int* data;
                };
        section
            pre.
                在IntStack.cpp中实现:

                IntStack::IntStack(int capbility){
                    data = new int[capbility];
                }
            br
            .fragment
                pre.
                    或者直接在IntStack.h中实现:

                    class IntStack{
                    public:
                        IntStack(int capbility){
                            data = new int[capbility];
                        }
                        ...
                    }
        section
            pre.
                Point(int x, int y){
                    this->x = x;
                    this->y = y;
                }
            br
            .fragment
                pre.
                    利用初始化列表:

                    Point(int x, int y):x(x),y(y) {}
        section
            pre.
                void foo(){
                    IntStack s1(100);
                    IntStack s2(10000);
                }
                ???
            pre.fragment.
                内存泄漏！！！
        section
            pre.
                class IntStack{
                    public:
                        IntStack(int capbility){
                            data = new int[capbility];
                        }
                        ~IntStack(){ //析构函数
                            delete [] data;
                        }
                    }

        section
            h3 【课堂练习7-2】安全数组(1)
            br
            ul
                li 数组满时，不能追加元素
                br
                li 数组下标越界时，报错！
        section
            h3 【课堂练习7-2】安全数组(2)
            br
            ul
                li 数组满时，自动扩容


