//
   User: luckystar
   Date: 13-9-11
   Time: 下午3:03

extends base

block title
    title Class & Object

block slides
    section
        h1 Class & Object
        br
        h2 (类 与 对象)

    section
        section
            h3 Encapsulation
            br
            h3 (封装)
        section
            h3 使用 Queue类和对象
            pre.
                Queue q1 , q2 [ 10 ];
                if ( !q1.isFull() ) {
                    q1.append ( 100 ) ;
                }
                int n = q1.popHead ( ) ;
                if ( q1.isEmpty() ) {
                    int n = q1.popHead ( ) ;
                    cout << n ;
                }
                ...
                Queue *p = new Queue() ;
                p -> append ( 100 ) ;
                p = &q1 ;
                ...
        section
            h3 define/declare(定义/声明）: Queue类 （ Queue.h ）
            pre.
                class Queue{

                public:
                    void append ( int item ) ;
                    int popHead ( ) ;
                    bool isEmpty ( ) ;
                    bool isFull ( ) ;

                private：
                    int data[ 100] ;
                    int head = 10 ;
                    int tail = 10 ;
                };
        section
            h3 implement(实现) Queue类 ( Queue.cpp )
            pre.
                #include “ Queue ”

                void Queue::append( int item ){
                    data[ head ] = item;
                    head = (head+1) % 100;
                }

                int Queue::popHead(){
                    tail = ( tail + 1 ) % 100 ;
                    return data[ tail-1 ] ;
                }
                bool isEmpty(){
                    return (head == tail);
                };
                bool isFull(){
                    return ((head+1)%100 == tail);
                };
        section
            h3 【课堂练习7-1】IntStack类
            br
            ul
                li LIFO(后进先出,FILO)
                br
                li 可容纳100个元素
                br
                li 可判断是否为空
                br
                li 可判断是否已满
                br
                li push(进栈)操作
                br
                li pop(出栈)操作
    section
        section
            h3 constructor/deconstuctor
            br
            h3 (构造/析构)
        section
            h3 改进IntStack类
            br
            h3 初始化的时候确定最大容量
            pre.
                class IntStack{

                public:
                    IntStack(int capbility){

                    }
                    ...
                };
        section
            h3 【课堂练习7-2】安全数组(1)
            br
            ul
                li 数组满时，不能追加元素
                br
                li 数组下标越界时，报错！
        section
            h3 【课堂练习7-2】安全数组(2)
            br
            ul
                li 数组满时，自动扩容


